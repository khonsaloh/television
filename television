#!/usr/bin/env bash

dep_ck () {
	for dep in "$@"; do
		command -v "$dep" 1>/dev/null \
			|| { printf "$dep not found. Please install it. ($dep no encontrado. Por favor instalalo) .\\n"; exit 2; }
	done
}
dep_ck "sed" "xdotool" "curl"  "jq" "youtube-dl" "mpv" "dmenu" "awk" "grep"

y="\033[1;33m"
re="\033[0m"
table=1
fzf=0
main_url="https://iptv-org.github.io/iptv/channels.json"
location='/usr/local/bin/television'
History=0
devour=1

# allow custom variables in configuration file
[ -f "$HOME"/.config/television ] && . "$HOME"/.config/television

help() {
printf "opciones son:\\n"
printf '%b' "${y}-es${re}\\tpara canales en espa単ol\\n"
printf '%b' "${y}-r${re}\\tpara radio\\n"
printf '%b' "${y}-d${re}\\tpara descargar el archivo m3u\\n"
printf '%b' "${y}-l${re}\\tpara listas de reproduccion, (pulsando p se obtiene un menu)\\n"
printf '%b' "${y}-le${re}\\tpara listas de reproduccion en espa単ol exclusivamente, (pulsando p se obtiene un menu)\\n"
printf '%b' "${y}-L${re}\\tpara solo obtener el link\\n" 
printf '%b' "${y}-u${re}\\tpara actualizar script\\n" 
}

update () {
url='https://raw.githubusercontent.com/khonsaloh/television/master/television'
command -v doas >/dev/null && auth=doas
command -v sudo >/dev/null && auth=sudo
$auth curl -sL $url -o $location
$auth chmod +x $location
}


case $1 in
	-es) 
		a="$(curl -Lsf 'https://www.tdtchannels.com/lists/tv.m3u' | grep -v '#')" \
			&& vent=$(xdotool getactivewindow) && xdotool windowunmap $vent
		while true; do
			b="$(echo "$a" | dmenu -i -l 30 -sb '#661a1a' -p 'television espa単ola')"
			[ -z "$b" ] && xdotool windowmap $vent && exit || mpv --really-quiet "$b" 
		done &
		;; #individuales
	
	-r) 
		a="$(curl -Lsf 'https://www.tdtchannels.com/lists/radio.m3u8' | grep -v '#')"
		while true; do
			b="$(echo "$a" | dmenu -i -l 30 -sb '#661a1a' -p 'television espa単ola')"
				[ -z "$b" ] && exit || mpv --really-quiet "$b" 2>/dev/null
		done
		;;
	
	-d) 
		url=$(curl -Lsf 'https://raw.githubusercontent.com/iptv-org/iptv/master/README.md' |
		awk '/http/' | grep -o -P '(?<=code>).*(?=</code)' | sed 's/<.*//' |
		dmenu -i -l 30 -sb '#661a1a' -p 'television') && curl -sfL $url -o $PWD/"$(echo $url \
		| awk -F'/' '{print $NF}')" ;;
	
	-l) 
		curl -Lsf https://raw.githubusercontent.com/iptv-org/iptv/master/README.md | grep 'http' \
			| grep -o -P '(?<=code>).*(?=</code)' | sed 's/<.*//' >/tmp/iptv_categories
		while true; do
			rec="$(cut -f2- /tmp/iptv_categories | awk -F'/' '{print $(NF-1),$NF}' \
				| sort | fzf | rev | cut -c5- | cut -d' ' -f1 | rev)"
			[ -n "$rec" ] && vent=$(xdotool getactivewindow) && xdotool windowunmap $vent
			url=$(grep "$rec.m3u$" /tmp/iptv_categories)
			[ -z "$rec" ] && exit
			mpv --script=./plugins/playlistmanager.lua \
				--use-filedir-conf=yes "$url"
			xdotool windowmap $vent
		done 
		;;
	-le)
		url=$(curl -Lsf  'https://www.tdtchannels.com/lists/tv.w3u' \
			| jq -r '["CANAL","ENLACE"], ["----","------"], (.groups[].stations[] | [.name, .url]) | @csv')
		[ -n "$url" ] && vent=$(xdotool getactivewindow) && xdotool windowunmap $vent
		while true; do
			menu=$(printf '%s' "$url\n" | column -t -s',' | tr -d '"' \
				| dmenu -i -l 20 -p television -sb '#661a1a' -fn 'mono' \
				| awk '{print $NF}')
			[ -z "$menu" ] && xdotool windowmap $vent && exit \
				|| mpv "$menu"

		done
		;;
	-L)

		url=$(curl -Lsf 'https://iptv-org.github.io/iptv/channels.json' \
			| jq -r '["CANAL","ENLACE"], ["----","------"], (.[] | [.name, .url]) | @csv')
		printf '%b' "$url\n" | column -t -s',' | tr -d '"' \
			| dmenu -i -l 30 -fn 'mono' -p 'elige enlace: ' | awk '{print $NF}'

		;;

	 -G) 
		a="$(curl -Lsf https://iptv-org.github.io/iptv/channels.json \
	 	| jq -r '["CANAL","ENLACE"], ["----","------"], (.[] | [.name, .url]) | @csv' \
		| dmenu -i -l 30 | awk '{print $NF}')"
		[ -n "$a" ] && ffmpeg -i "$a" -c copy /tmp/out.ts; mpv /tmp/out.ts
		;;
	 -u) 
		tele=$(command -v television)
		url="$(curl -sL 'https://raw.githubusercontent.com/khonsaloh/television/master/television')"
		diff -q "$tele" <(echo "$url") >/dev/null && printf "no hay actualizaciones\\n" || update
		;;
	
	*) [ -n "$1" ] && help ;;
esac


[ -n "$1" ] && exit


CHANNELS_LIST=$(curl -sL "$main_url" \
	| jq -r '.[] | "\(.name) \t \(.category // "N/A") \t \(.languages|.[0].name // "N/A") \t \(.countries|.[0].name // "N/A") \t \(.url)"' |\
	                gawk -v max="${COLUMNS:-80}" 'BEGIN { RS="\n"; FS=" \t " }
                    {
	               name = substr(gensub(/[0-9]+\.\s*(.*)/, "\\1", "g", $1),0,max/4)
	               category = substr(gensub(/\s+> (.*)/, "\\1", "g", $2),0,max/8)
	               languages = substr(gensub(/\s+> (.*)/, "\\1", "g", $3),0,max/8)
	               countries = substr(gensub(/\s+> (.*)/, "\\1", "g", $4),0,70)
	               channelUrl = substr(gensub(/\s+> (.*)/, "\\1", "g", $5),0)
	               print name "\t|" category "\t|" languages "\t|" countries "\t" channelUrl
	              }' | column -t -s $'\t' \

)

hide_win () {
	vent=$(xdotool getactivewindow) \
		&& xdotool windowunmap $vent
	$@
	xdotool windowmap $vent
}

export -f hide_win
_play() {
	printf '%s\n' "Fetching channel, please wait..."
	hide_win mpv "${*##* }" --really-quiet --force-media-title="${*%%  *}"
	}

export -f _play
SHELL="$(command -v bash)"		     
 printf '%s\n' "${CHANNELS_LIST}" | fzf -e -i --reverse --cycle --with-nth="1..-2"\
           --bind "enter:execute(_play {})"\
           --header="Select channel (press Escape to exit)" -q "${*:-}" 
